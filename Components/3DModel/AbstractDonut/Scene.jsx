/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 scene.gltf
Author: IAM_YX (https://sketchfab.com/MXUD)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/abstract-doughnut-c07fa13f34ff4ac8909881f95ee78491
Title: Abstract doughnut
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, Center, OrbitControls } from '@react-three/drei'
import { useThree } from '@react-three/fiber'
import gsap from 'gsap'

export function AbstractDonut(props) {
  const groupRef = useRef(null);
  const camera = useThree(state => state.camera);
  const { nodes, materials } = useGLTF('/3DModels/abstract_doughnut/scene.gltf');

  useEffect(() => {

    const timeline = gsap.timeline({
      scrollTrigger: {
        trigger: '#DonutContainer',
        start: 'top-=1000 top',
        markers: true,
        scrub: true,
      }
    }).fromTo(camera.position, {y: -7}, {y:0}, "key1").fromTo(groupRef.current.rotation, {z: 0}, {z: Math.PI * 4}, "key1");

    return () => {
      timeline.kill();
    }
  }, [])

  return (
    <>
      <directionalLight color = {'#ff0000'} intensity={1} position = {[2, 4, 0]}/>
      <directionalLight color = {'#0000ff'} intensity={1} position = {[-2, -4, 0]}/>
      <directionalLight color = {'#00ff15'} intensity={1} position = {[0, -4, 0]}/>
      <group {...props} dispose={null} ref = {groupRef} scale={2} rotation = {[Math.PI / 2, Math.PI / 1.35, 0]}>
        <mesh geometry={nodes.Object_4.geometry} material={materials['Scene_-_Root']}/>
        <mesh geometry={nodes.Object_5.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_6.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_7.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_8.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_9.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_10.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_11.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_12.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_13.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_14.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_15.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_16.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_17.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_18.geometry} material={materials['Scene_-_Root']} />
        <mesh geometry={nodes.Object_19.geometry} material={materials['Scene_-_Root']} />
      </group>
    </>
  )
}

useGLTF.preload('/3DModels/abstract_doughnut/scene.gltf')
